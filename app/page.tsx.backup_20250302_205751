'use client';

import { useState, useRef, useEffect, useLayoutEffect } from 'react';
import { PDFDocument, rgb } from 'pdf-lib';
import Image from 'next/image';

export default function Home() {
  const [file, setFile] = useState<File | null>(null);
  const [noteSpaceWidth, setNoteSpaceWidth] = useState(200);
  const [outputFileName, setOutputFileName] = useState('');
  const [baseFileName, setBaseFileName] = useState('');
  const [includeWithNotes, setIncludeWithNotes] = useState(false);
  const [feedback, setFeedback] = useState('');
  const [pdfPreviewUrl, setPdfPreviewUrl] = useState<string | { original: string, modified: string }>('');
  const [isProcessing, setIsProcessing] = useState(false);
  const [totalPages, setTotalPages] = useState(0);
  const [downloadIsProcessing, setDownloadIsProcessing] = useState(false);
  const fileInputRef = useRef<HTMLInputElement>(null);
  
  // New state variables for color options
  const [useCustomColor, setUseCustomColor] = useState(true);
  const [colorOption, setColorOption] = useState('white'); // 'white', 'custom'
  const [customColor, setCustomColor] = useState('#ffffff'); // Default white
  const [noteSpacePosition, setNoteSpacePosition] = useState('right'); // 'right', 'left', 'top', 'bottom'
  const predefinedColors = [
    { name: 'White', value: '#ffffff' },
    { name: 'Light Gray', value: '#f0f0f0' },
    { name: 'Gray', value: '#cccccc' },
    { name: 'Black', value: '#000000' },
    { name: 'Light Blue', value: '#e6f7ff' },
    { name: 'Light Yellow', value: '#ffffcc' },
    { name: 'Light Green', value: '#e6ffcc' },
    { name: 'Light Pink', value: '#ffe6e6' }
  ];

  // New state for feedback image
  const [feedbackImages, setFeedbackImages] = useState<File[]>([]);
  const [feedbackImagePreviews, setFeedbackImagePreviews] = useState<string[]>([]);
  const feedbackImageRef = useRef<HTMLInputElement>(null);

  // New state for tracking if the feedback section needs extra height
  const [feedbackSectionNeedsExtraHeight, setFeedbackSectionNeedsExtraHeight] = useState(false);

  const handleFileUpload = (uploadedFile: File) => {
    if (uploadedFile.size > 50 * 1024 * 1024) { // 50MB
      alert('File size exceeds 50MB limit. Please choose a smaller file.');
      return;
    }
    setFile(uploadedFile);
    const baseName = uploadedFile.name.replace(/\.pdf$/, '');
    setBaseFileName(baseName);
    updateOutputFileName(baseName, includeWithNotes);
  };

  const clearFile = () => {
    setFile(null);
    setOutputFileName('');
    setBaseFileName('');
    setPdfPreviewUrl('');
    // Reset the file input
    if (fileInputRef.current) {
      fileInputRef.current.value = '';
    }
  };

  // Update the output filename when baseFileName or includeWithNotes changes
  const updateOutputFileName = (base: string, withNotes: boolean) => {
    if (base) {
      setOutputFileName(withNotes ? `${base}_with_notes.pdf` : `${base}.pdf`);
    }
  };

  useEffect(() => {
    updateOutputFileName(baseFileName, includeWithNotes);
  }, [baseFileName, includeWithNotes]);

  // Handle base filename change
  const handleBaseFileNameChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const newBaseFileName = e.target.value;
    setBaseFileName(newBaseFileName);
  };

  // Handle checkbox change
  const handleCheckboxChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setIncludeWithNotes(e.target.checked);
  };

  // Reset base filename
  const resetBaseFileName = () => {
    if (file) {
      const baseName = file.name.replace(/\.pdf$/, '');
      setBaseFileName(baseName);
    } else {
      setBaseFileName('');
    }
  };

  // PDF Viewer functionality
  useEffect(() => {
    const generatePreview = async () => {
      if (!file) return;
      
      try {
        setIsProcessing(true);
        
        // Read the file
        const fileBuffer = await file.arrayBuffer();
        const originalPdfDoc = await PDFDocument.load(fileBuffer);
        const totalPageCount = originalPdfDoc.getPageCount();
        setTotalPages(totalPageCount);

        // Create original preview document (max 3 pages)
        const originalPreviewDoc = await PDFDocument.create();
        const pagesToPreview = Math.min(totalPageCount, 3);

        // Copy pages to original preview document without modifications
        for (let i = 0; i < pagesToPreview; i++) {
          const [originalPage] = await originalPreviewDoc.copyPages(originalPdfDoc, [i]);
          originalPreviewDoc.addPage(originalPage);
        }

        // Save and create URL for original preview
        const originalPdfBytes = await originalPreviewDoc.save();
        
        // Create original preview URL
        const originalPreviewUrl = URL.createObjectURL(new Blob([originalPdfBytes], { type: 'application/pdf' }));
        
        // Create modified preview document (max 3 pages)
        const modifiedPreviewDoc = await PDFDocument.create();

        // Copy pages to modified preview document
        for (let i = 0; i < pagesToPreview; i++) {
          // If noteSpaceWidth is provided, create a new page with extended dimensions
          if (noteSpaceWidth > 0) {
            const originalPage = originalPdfDoc.getPage(i);
            const { width, height } = originalPage.getSize();
            
            // Calculate new dimensions based on position
            let newWidth = width;
            let newHeight = height;
            
            if (noteSpacePosition === 'right' || noteSpacePosition === 'left') {
              newWidth = width + noteSpaceWidth;
            } else { // top or bottom
              newHeight = height + noteSpaceWidth;
            }
            
            // Create a new blank page with the new dimensions
            const newPage = modifiedPreviewDoc.addPage([newWidth, newHeight]);
            
            // Embed the original page content
            const embeddedPage = await modifiedPreviewDoc.embedPage(originalPage);
            
            // Calculate position for the embedded content
            let contentX = 0;
            let contentY = 0;
            
            if (noteSpacePosition === 'left') {
              contentX = noteSpaceWidth;
            } else if (noteSpacePosition === 'bottom') {
              contentY = noteSpaceWidth;
            }
            
            // Draw the embedded page at the correct position
            newPage.drawPage(embeddedPage, {
              x: contentX,
              y: contentY
            });
            
            // Apply color to the note space
            const color = colorOption === 'custom' ? customColor : '#ffffff';
            const rgbColor = hexToRgb(color);
            if (rgbColor) {
              // Position the rectangle based on the selected position
              let x = 0, y = 0;
              let rectWidth = 0, rectHeight = 0;
              
              switch (noteSpacePosition) {
                case 'right':
                  x = width;
                  y = 0;
                  rectWidth = noteSpaceWidth;
                  rectHeight = height;
                  break;
                case 'left':
                  x = 0;
                  y = 0;
                  rectWidth = noteSpaceWidth;
                  rectHeight = height;
                  break;
                case 'top':
                  x = 0;
                  y = height;
                  rectWidth = width;
                  rectHeight = noteSpaceWidth;
                  break;
                case 'bottom':
                  x = 0;
                  y = 0;
                  rectWidth = width;
                  rectHeight = noteSpaceWidth;
                  break;
              }
              
              // Draw the rectangle
              newPage.drawRectangle({
                x,
                y,
                width: rectWidth,
                height: rectHeight,
                color: rgb(rgbColor.r, rgbColor.g, rgbColor.b)
              });
            }
          } else {
            // If no note space is needed, just copy the original page
            const [page] = await modifiedPreviewDoc.copyPages(originalPdfDoc, [i]);
            modifiedPreviewDoc.addPage(page);
          }
        }

        // Save and create URL for modified preview
        const modifiedPdfBytes = await modifiedPreviewDoc.save();
        
        // Clean up old preview URL
        if (pdfPreviewUrl) {
          if (typeof pdfPreviewUrl === 'object') {
            URL.revokeObjectURL(pdfPreviewUrl.original);
            URL.revokeObjectURL(pdfPreviewUrl.modified);
          } else {
            URL.revokeObjectURL(pdfPreviewUrl);
          }
        }

        // Create new preview URL for modified PDF
        const modifiedPreviewUrl = URL.createObjectURL(new Blob([modifiedPdfBytes], { type: 'application/pdf' }));
        
        // Set the preview URLs
        setPdfPreviewUrl({
          original: originalPreviewUrl,
          modified: modifiedPreviewUrl
        });
      } catch (error) {
        console.error('Error generating preview:', error);
      } finally {
        setIsProcessing(false);
      }
    };

    if (file) {
      generatePreview();
    }

    // Cleanup function
    return () => {
      if (pdfPreviewUrl) {
        if (typeof pdfPreviewUrl === 'object') {
          URL.revokeObjectURL(pdfPreviewUrl.original);
          URL.revokeObjectURL(pdfPreviewUrl.modified);
        } else {
          URL.revokeObjectURL(pdfPreviewUrl);
        }
      }
    };
  }, [file, noteSpaceWidth, colorOption, customColor, noteSpacePosition]);

  // Download functionality
  const handleDownload = async () => {
    if (!file) return;
    
    try {
      setDownloadIsProcessing(true);

      // Read the file
      const fileBuffer = await file.arrayBuffer();
      const pdfDoc = await PDFDocument.load(fileBuffer);
      
      // Create a new PDF document for the modified pages
      const modifiedPdfDoc = await PDFDocument.create();
      
      // Process each page
      const pages = pdfDoc.getPages();
      for (let i = 0; i < pages.length; i++) {
        const originalPage = pdfDoc.getPage(i);
        const { width, height } = originalPage.getSize();
        
        // If noteSpaceWidth is provided, create a new page with extended dimensions
        if (noteSpaceWidth > 0) {
          // Calculate new dimensions based on position
          let newWidth = width;
          let newHeight = height;
          
          if (noteSpacePosition === 'right' || noteSpacePosition === 'left') {
            newWidth = width + noteSpaceWidth;
          } else { // top or bottom
            newHeight = height + noteSpaceWidth;
          }
          
          // Create a new blank page with the new dimensions
          const newPage = modifiedPdfDoc.addPage([newWidth, newHeight]);
          
          // Embed the original page content
          const embeddedPage = await modifiedPdfDoc.embedPage(originalPage);
          
          // Calculate position for the embedded content
          let contentX = 0;
          let contentY = 0;
          
          if (noteSpacePosition === 'left') {
            contentX = noteSpaceWidth;
          } else if (noteSpacePosition === 'bottom') {
            contentY = noteSpaceWidth;
          }
          
          // Draw the embedded page at the correct position
          newPage.drawPage(embeddedPage, {
            x: contentX,
            y: contentY
          });
          
          // Apply color to the note space
          const color = colorOption === 'custom' ? customColor : '#ffffff';
          const rgbColor = hexToRgb(color);
          if (rgbColor) {
            // Position the rectangle based on the selected position
            let x = 0, y = 0;
            let rectWidth = 0, rectHeight = 0;
            
            switch (noteSpacePosition) {
              case 'right':
                x = width;
                y = 0;
                rectWidth = noteSpaceWidth;
                rectHeight = height;
                break;
              case 'left':
                x = 0;
                y = 0;
                rectWidth = noteSpaceWidth;
                rectHeight = height;
                break;
              case 'top':
                x = 0;
                y = height;
                rectWidth = width;
                rectHeight = noteSpaceWidth;
                break;
              case 'bottom':
                x = 0;
                y = 0;
                rectWidth = width;
                rectHeight = noteSpaceWidth;
                break;
            }
            
            // Draw the rectangle
            newPage.drawRectangle({
              x,
              y,
              width: rectWidth,
              height: rectHeight,
              color: rgb(rgbColor.r, rgbColor.g, rgbColor.b)
            });
          }
        } else {
          // If no note space is needed, just copy the original page
          const [page] = await modifiedPdfDoc.copyPages(pdfDoc, [i]);
          modifiedPdfDoc.addPage(page);
        }
      }

      // Save the PDF
      const modifiedPdfBytes = await modifiedPdfDoc.save();
      
      // Create download link
      const blob = new Blob([modifiedPdfBytes], { type: 'application/pdf' });
      const url = URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      link.download = outputFileName || file.name.replace('.pdf', '_with_notes.pdf');
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      URL.revokeObjectURL(url);

      // After processing, show feedback
      setIsProcessing(false);
      setFeedback('PDF downloaded successfully!');
      clearAllFeedbackImages();
      setFeedbackSectionNeedsExtraHeight(false);

    } catch (error) {
      console.error('Error processing PDF:', error);
      alert('Error processing PDF. Please try again with a different file.');
    } finally {
      setDownloadIsProcessing(false);
    }
  };

  // Helper function to convert hex color to RGB
  const hexToRgb = (hex: string) => {
    const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
    return result ? {
      r: parseInt(result[1], 16) / 255,
      g: parseInt(result[2], 16) / 255,
      b: parseInt(result[3], 16) / 255
    } : null;
  };

  // Handle feedback image upload
  const handleFeedbackImageUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    const files = e.target.files;
    if (files && files.length > 0) {
      // Convert FileList to array
      const newFiles: File[] = Array.from(files);
      
      // Check if files are images and within size limit
      const validFiles = newFiles.filter(file => {
        // Check if file is an image
        if (!file.type.startsWith('image/')) {
          alert('Please upload only image files (JPEG, PNG, etc.)');
          return false;
        }
        
        // Check file size (max 5MB)
        if (file.size > 5 * 1024 * 1024) {
          alert(`Image "${file.name}" exceeds 5MB limit. Please choose a smaller image.`);
          return false;
        }
        
        return true;
      });
      
      if (validFiles.length > 0) {
        // Add new files to existing files
        setFeedbackImages(prev => [...prev, ...validFiles]);
        setFeedbackSectionNeedsExtraHeight(true);
        
        // Create previews for new files
        validFiles.forEach(file => {
          const reader = new FileReader();
          reader.onload = (e) => {
            setFeedbackImagePreviews(prev => [...prev, e.target?.result as string]);
          };
          reader.readAsDataURL(file);
        });
      }
      
      // Reset the file input to allow selecting the same files again
      if (feedbackImageRef.current) {
        feedbackImageRef.current.value = '';
      }
    }
  };
  
  // Clear all feedback images
  const clearAllFeedbackImages = () => {
    setFeedbackImages([]);
    setFeedbackImagePreviews([]);
    setFeedbackSectionNeedsExtraHeight(false);
    if (feedbackImageRef.current) {
      feedbackImageRef.current.value = '';
    }
  };
  
  // Remove a specific feedback image
  const removeFeedbackImage = (index: number) => {
    setFeedbackImages(prev => prev.filter((_, i) => i !== index));
    setFeedbackImagePreviews(prev => prev.filter((_, i) => i !== index));
    
    // If no images left, reset the extra height
    if (feedbackImages.length <= 1) {
      setFeedbackSectionNeedsExtraHeight(false);
    }
  };
  
  // Submit feedback
  const submitFeedback = () => {
    // In a real application, you would send the feedback and images to a server
    // For now, we'll just show an alert and clear the form
    setFeedback('');
    setFeedbackImages([]);
    setFeedbackImagePreviews([]);
    setFeedbackSectionNeedsExtraHeight(false);
    if (feedbackImageRef.current) {
      feedbackImageRef.current.value = '';
    }
    alert('Thank you for your feedback!');
  };

  return (
    <div style={{ 
      width: '100%', 
      minHeight: '85vh',
      position: 'relative',
      overflow: 'hidden',
      backgroundColor: '#f2c4aa',
      border: 'none',
      outline: 'none'
    }}>
      {/* Background color sections that extend full width with fixed heights */}
      <div style={{
        position: 'absolute',
        top: 0,
        left: 0,
        width: '100%',
        height: '100px',
        backgroundColor: '#edc077',
        zIndex: 0
      }}></div>
      
      <div style={{
        position: 'absolute',
        top: '100px',
        left: 0,
        width: '100%',
        height: '350px',
        backgroundColor: '#b5b2ae',
        zIndex: 0
      }}></div>
      
      {/* Green section with fixed height */}
      <div id="greenSection" style={{
        position: 'absolute',
        top: '450px',
        left: 0,
        width: '100%',
        height: '950px',
        backgroundColor: '#c7edd4',
        zIndex: 0
      }}></div>
      
      <div style={{
        position: 'absolute',
        top: '1400px', /* 450px + 950px */
        left: 0,
        width: '100%',
        height: feedbackSectionNeedsExtraHeight ? '500px' : '400px',
        backgroundColor: '#c7caed',
        zIndex: 0
      }}></div>
      
      {/* Left side box */}
      <div style={{
        backgroundColor: '#f2c4aa',
        width: '180px',
        position: 'absolute',
        top: 0,
        left: 0,
        bottom: 0,
        zIndex: 1
      }}></div>
      
      {/* Right side box */}
      <div style={{
        backgroundColor: '#f2c4aa',
        width: '180px',
        position: 'absolute',
        top: 0,
        right: 0,
        bottom: 0,
        zIndex: 1
      }}></div>
      
      {/* Main content */}
      <div style={{
        position: 'relative',
        width: 'calc(100% - 360px)',
        maxWidth: '1200px',
        margin: '0 auto',
        marginLeft: '180px',
        paddingTop: '0',
        zIndex: 2
      }}>
        {/* Header section */}
        <div style={{
          width: '100%',
          minHeight: '100px',
          display: 'flex',
          justifyContent: 'center',
          alignItems: 'center',
          borderBottom: '1px solid #ddd',
          boxShadow: '0 2px 4px rgba(0,0,0,0.1)'
        }}>
          {/* Header content */}
          <div style={{
            display: 'flex',
            alignItems: 'center',
            gap: '15px'
          }}>
            <div style={{
              width: '80px',
              height: '80px',
              backgroundColor: 'white',
              borderRadius: '50%',
              display: 'flex',
              justifyContent: 'center',
              alignItems: 'center',
              overflow: 'hidden',
              border: '1px solid #ddd',
              padding: '3px'
            }}>
              <Image 
                src="/images/Logo.png"
                alt="PDFextend Logo"
                width={70}
                height={70}
                style={{
                  borderRadius: '50%',
                  objectFit: 'cover',
                  width: '100%',
                  height: '100%',
                  transform: 'scale(1.1)'
                }}
                priority
              />
            </div>
            <div style={{
              fontSize: '28px',
              fontWeight: 'bold',
              color: '#333'
            }}>
              SpaceMyPDF
            </div>
          </div>
        </div>
        
        {/* Gray section with features */}
        <div style={{
          width: '100%',
          minHeight: '350px',
          padding: '15px 20px 15px 20px',
          boxSizing: 'border-box',
          flex: 1,
          display: 'flex',
          flexDirection: 'column',
          position: 'relative',
          zIndex: 2,
          maxHeight: '350px'
        }}>
          {/* AI-created info banner moved inside the gray section */}
          <div style={{
            width: 'calc(100% - 20px)', /* Reduced width to ensure it doesn't overflow */
            margin: '0 auto', /* Center the banner */
            padding: '8px 15px', /* Reduced vertical padding from 10px to 8px */
            backgroundColor: 'rgba(255,255,255,0.7)',
            borderRadius: '5px',
            textAlign: 'center',
            fontSize: '14px',
            color: '#555',
            marginBottom: '15px', /* Reduced from 25px to 15px */
            boxSizing: 'border-box', /* Added to ensure padding is included in width calculation */
            wordWrap: 'break-word', /* Added to ensure text wraps properly */
            maxWidth: '100%' /* Ensure it doesn't exceed its container */
          }}>
            <p style={{ margin: '0', maxWidth: '100%' }}>
              <strong>Created with AI:</strong> This website was developed using artificial intelligence. Please share any feedback or report bugs using the form at the bottom of the page.
            </p>
          </div>
          
          <h2 style={{
            textAlign: 'center',
            margin: '0 0 10px 0', /* Reduced bottom margin from 15px to 10px */
            color: '#333',
            fontSize: '24px'
          }}>
            Why Choose SpaceMyPDF?
          </h2>
          
          <div style={{
            display: 'flex',
            flexWrap: 'wrap',
            justifyContent: 'space-between',
            gap: '15px', /* Reduced from 20px to 15px */
            height: '200px', /* Reduced from 220px to 200px */
            overflow: 'auto' /* Added overflow to handle any content that might exceed the container */
          }}>
            <div style={{
              flex: 1,
              backgroundColor: 'rgba(255,255,255,0.7)',
              padding: '12px', /* Reduced from 15px to 12px */
              borderRadius: '5px',
              height: '130px', /* Reduced from 140px to 130px */
              overflow: 'auto', /* Changed from 'hidden' to 'auto' to allow scrolling if needed */
              marginBottom: '10px' /* Reduced from 20px to 10px */
            }}>
              <h3 style={{ margin: '0 0 8px 0', fontSize: '18px' }}>Easy to Use</h3>
              <p style={{ margin: '0', fontSize: '13px', lineHeight: '1.3' }}> {/* Reduced font size and line height */}
                SpaceMyPDF allows you to easily add note space to your PDFs. Perfect for students, professionals, and anyone who needs more room for annotations.
              </p>
            </div>
            
            <div style={{
              flex: 1,
              backgroundColor: 'rgba(255,255,255,0.7)',
              padding: '12px', /* Reduced from 15px to 12px */
              borderRadius: '5px',
              height: '130px', /* Reduced from 140px to 130px */
              overflow: 'auto', /* Changed from 'hidden' to 'auto' to allow scrolling if needed */
              marginBottom: '10px' /* Reduced from 20px to 10px */
            }}>
              <h3 style={{ margin: '0 0 8px 0', fontSize: '18px' }}>Customizable</h3>
              <p style={{ margin: '0', fontSize: '13px', lineHeight: '1.3' }}> {/* Reduced font size and line height */}
                Adjust the note space width to fit your needs. Whether you need a small margin or a full page for notes, SpaceMyPDF has you covered.
              </p>
            </div>
            
            <div style={{
              flex: 1,
              backgroundColor: 'rgba(255,255,255,0.7)',
              padding: '12px', /* Reduced from 15px to 12px */
              borderRadius: '5px',
              height: '130px', /* Reduced from 140px to 130px */
              overflow: 'auto', /* Changed from 'hidden' to 'auto' to allow scrolling if needed */
              marginBottom: '10px' /* Reduced from 20px to 10px */
            }}>
              <h3 style={{ margin: '0 0 8px 0', fontSize: '18px' }}>Private & Secure</h3>
              <p style={{ margin: '0', fontSize: '13px', lineHeight: '1.3' }}> {/* Reduced font size and line height */}
                All processing happens directly in your browser. Your PDFs never leave your device, ensuring complete privacy and security for your sensitive documents.
              </p>
            </div>
            
            <div style={{
              flex: 1,
              backgroundColor: 'rgba(255,255,255,0.7)',
              padding: '12px', /* Reduced from 15px to 12px */
              borderRadius: '5px',
              height: '130px', /* Reduced from 140px to 130px */
              overflow: 'auto', /* Changed from 'hidden' to 'auto' to allow scrolling if needed */
              marginBottom: '10px' /* Reduced from 20px to 10px */
            }}>
              <h3 style={{ margin: '0 0 8px 0', fontSize: '18px' }}>Free to Use</h3>
              <p style={{ margin: '0', fontSize: '13px', lineHeight: '1.3' }}> {/* Reduced font size and line height */}
                SpaceMyPDF is completely free to use. No registration required, no hidden fees, and no limits on the number of PDFs you can process.
              </p>
            </div>
          </div>
        </div>
        
        {/* Green section with main functionality */}
        <div 
          className="green-content-wrapper"
          style={{
            width: '100%',
            height: '950px',
            display: 'flex',
            boxSizing: 'border-box',
            paddingBottom: '60px',
            borderBottom: '1px solid #ddd',
            boxShadow: '0 2px 4px rgba(0,0,0,0.1)',
            overflow: 'auto' /* Add scrolling if content exceeds fixed height */
          }}>
          <div style={{
            flex: 3,
            padding: '20px',
            position: 'relative',
            display: 'flex',
            flexDirection: 'column',
            overflow: 'hidden'
          }}>
            <h2 style={{ 
              fontSize: '24px', 
              fontWeight: 'bold',
              color: '#333',
              textAlign: 'center',
              marginBottom: '10px',
              marginTop: '0'
            }}>
              PREVIEW
            </h2>
            
            {/* New how-to-use instructions */}
            <div style={{
              backgroundColor: 'rgba(255,255,255,0.7)',
              padding: '10px 15px',
              borderRadius: '5px',
              marginBottom: '15px',
              border: '1px solid #ddd'
            }}>
              <p style={{ fontSize: '14px', margin: '0', lineHeight: '1.4' }}>
                <strong>How to use:</strong> Upload your PDF, select where to add note-taking space and customize its width and color. 
                Download the modified PDF and open it in your preferred application to start taking notes in the added space.
              </p>
            </div>
            
            <div style={{ flex: 1, display: 'flex', flexDirection: 'column' }}>
              <div style={{ marginBottom: '20px' }}>
                <h3 style={{ fontSize: '18px', fontWeight: 'bold', marginBottom: '5px', marginTop: '0' }}>Original</h3>
                <div style={{ 
                  height: '300px', /* Increased from 250px to 300px */
                  border: '1px solid #ddd',
                  backgroundColor: 'white'
                }}>
                  {file ? (
                    <div style={{ height: '100%', overflow: 'auto' }}>
                      {isProcessing ? (
                        <div style={{ 
                          width: '100%', 
                          height: '100%', 
                          backgroundColor: 'white', 
                          display: 'flex', 
                          alignItems: 'center', 
                          justifyContent: 'center' 
                        }}>
                          <p>Processing PDF...</p>
                        </div>
                      ) : (
                        <div style={{ width: '100%', height: '100%', backgroundColor: 'white', display: 'flex', justifyContent: 'center', alignItems: 'center' }}>
                          {pdfPreviewUrl ? (
                            <iframe 
                              src={`${typeof pdfPreviewUrl === 'object' ? pdfPreviewUrl.original : pdfPreviewUrl}#toolbar=0&navpanes=0&scrollbar=0`}
                              style={{ 
                                width: '100%', 
                                height: '100%',
                                border: 'none'
                              }} 
                              title="PDF Preview"
                            />
                          ) : (
                            <div style={{ 
                              display: 'flex', 
                              alignItems: 'center', 
                              justifyContent: 'center', 
                              height: '100%' 
                            }}>
                              <p>PDF preview not available</p>
                            </div>
                          )}
                        </div>
                      )}
                    </div>
                  ) : (
                    <div style={{ 
                      height: '100%', 
                      display: 'flex', 
                      alignItems: 'center', 
                      justifyContent: 'center',
                      backgroundColor: 'rgba(255,255,255,0.5)',
                      border: '1px dashed #999'
                    }}>
                      <p>Upload a PDF to see original</p>
                    </div>
                  )}
                </div>
              </div>
              
              <div style={{ height: '1px', backgroundColor: 'black', margin: '10px 0' }}></div>
              
              <div>
                <h3 style={{ fontSize: '18px', fontWeight: 'bold', marginBottom: '5px', marginTop: '0' }}>Preview with Notes</h3>
                <div style={{ 
                  height: '300px', /* Increased from 250px to 300px */
                  border: '1px solid #ddd',
                  backgroundColor: 'white'
                }}>
                  {file ? (
                    <div style={{ height: '100%', overflow: 'auto' }}>
                      {isProcessing ? (
                        <div style={{ 
                          width: '100%', 
                          height: '100%', 
                          backgroundColor: 'white', 
                          display: 'flex', 
                          alignItems: 'center', 
                          justifyContent: 'center' 
                        }}>
                          <p>Processing PDF...</p>
                        </div>
                      ) : (
                        <div style={{ width: '100%', height: '100%', backgroundColor: 'white', display: 'flex', justifyContent: 'center', alignItems: 'center' }}>
                          {pdfPreviewUrl ? (
                            <iframe 
                              src={`${typeof pdfPreviewUrl === 'object' ? pdfPreviewUrl.modified : pdfPreviewUrl}#toolbar=0&navpanes=0&scrollbar=0`}
                              style={{ 
                                width: '100%', 
                                height: '100%',
                                border: 'none'
                              }} 
                              title="PDF Preview with Notes"
                            />
                          ) : (
                            <div style={{ 
                              display: 'flex', 
                              alignItems: 'center', 
                              justifyContent: 'center', 
                              height: '100%' 
                            }}>
                              <p>PDF preview not available</p>
                            </div>
                          )}
                        </div>
                      )}
                    </div>
                  ) : (
                    <div style={{ 
                      height: '100%', 
                      display: 'flex', 
                      alignItems: 'center', 
                      justifyContent: 'center',
                      backgroundColor: 'rgba(255,255,255,0.5)',
                      border: '1px dashed #999'
                    }}>
                      <p>Upload a PDF to see preview</p>
                    </div>
                  )}
                </div>
                {file && (
                  <div style={{ marginTop: '10px' }}>
                    <p style={{ fontSize: '12px', margin: '0' }}>Note: Only the first 3 pages will be shown in the preview</p>
                  </div>
                )}
              </div>
            </div>
          </div>
          
          <div style={{
            width: '1px',
            backgroundColor: 'black',
            height: '100%'
          }}></div>
          
          <div style={{
            flex: 2,
            padding: '20px',
            display: 'flex',
            flexDirection: 'column',
            overflow: 'hidden'
          }}>
            <h2 style={{ 
              fontSize: '24px', 
              fontWeight: 'bold',
              color: '#333',
              textAlign: 'center',
              marginBottom: '10px',
              marginTop: '0'
            }}>
              CONTROLS
            </h2>
            
            {/* New detailed instructions for controls section */}
            <div style={{
              backgroundColor: 'rgba(255,255,255,0.7)',
              padding: '10px 15px',
              borderRadius: '5px',
              marginBottom: '15px',
              border: '1px solid #ddd'
            }}>
              <p style={{ fontSize: '14px', margin: '0 0 8px 0', lineHeight: '1.4' }}>
                <strong>Step 1:</strong> Upload your PDF document using the file selector below.
              </p>
              <p style={{ fontSize: '14px', margin: '0 0 8px 0', lineHeight: '1.4' }}>
                <strong>Step 2:</strong> Customize the note space by adjusting its width, position, and color.
              </p>
              <p style={{ fontSize: '14px', margin: '0', lineHeight: '1.4' }}>
                <strong>Step 3:</strong> Download your modified PDF and open it in any PDF viewer or annotation tool to start taking notes.
              </p>
            </div>
            
            <div style={{ 
              flex: 1, 
              overflowY: 'auto', 
              overflowX: 'hidden',
              display: 'flex',
              flexDirection: 'column',
              justifyContent: 'flex-start'
            }}>
              <div style={{ marginBottom: '20px' }}>
                <p style={{ fontWeight: 'bold', marginBottom: '5px' }}>Upload PDF</p>
                <div style={{ display: 'flex', alignItems: 'center' }}>
                  <input
                    ref={fileInputRef}
                    type="file"
                    accept=".pdf"
                    onChange={(e) => {
                      const file = e.target.files?.[0];
                      if (file) handleFileUpload(file);
                    }}
                    style={{ marginRight: '10px', maxWidth: '100%', width: '100%' }}
                    key={file ? 'pdf-input-with-file' : 'pdf-input-empty'}
                  />
                </div>
                <p style={{ fontSize: '12px', marginTop: '5px' }}>Maximum file size: 50MB</p>
              </div>
              
              {file && (
                <div style={{ marginBottom: '20px' }}>
                  <button
                    onClick={clearFile}
                    style={{
                      padding: '5px 10px',
                      backgroundColor: 'white',
                      border: '1px solid black',
                      borderRadius: '3px',
                      cursor: 'pointer'
                    }}
                  >
                    Clear PDF
                  </button>
                </div>
              )}
              
              <div style={{ marginBottom: '20px' }}>
                <p style={{ fontWeight: 'bold', marginBottom: '5px' }}>Note Space Width: {noteSpaceWidth}px</p>
                <input
                  type="range"
                  min="100"
                  max="1000"
                  value={noteSpaceWidth}
                  onChange={(e) => setNoteSpaceWidth(Number(e.target.value))}
                  style={{ width: '95%', maxWidth: '350px' }}
                />
                <div style={{ display: 'flex', justifyContent: 'space-between', fontSize: '12px', width: '95%', maxWidth: '350px' }}>
                  <span>100px</span>
                  <span>1000px</span>
                </div>
                
                {/* Preset size buttons */}
                <div style={{ marginTop: '10px' }}>
                  <p style={{ fontSize: '14px', marginBottom: '5px' }}>Preset Sizes:</p>
                  <div style={{ display: 'flex', gap: '10px', flexWrap: 'wrap' }}>
                    <button
                      onClick={() => setNoteSpaceWidth(200)}
                      style={{
                        padding: '5px 10px',
                        backgroundColor: noteSpaceWidth === 200 ? '#e6e6e6' : 'white',
                        border: noteSpaceWidth === 200 ? '2px solid black' : '1px solid black',
                        borderRadius: '3px',
                        cursor: 'pointer'
                      }}
                    >
                      S (200px)
                    </button>
                    <button
                      onClick={() => setNoteSpaceWidth(400)}
                      style={{
                        padding: '5px 10px',
                        backgroundColor: noteSpaceWidth === 400 ? '#e6e6e6' : 'white',
                        border: noteSpaceWidth === 400 ? '2px solid black' : '1px solid black',
                        borderRadius: '3px',
                        cursor: 'pointer'
                      }}
                    >
                      M (400px)
                    </button>
                    <button
                      onClick={() => setNoteSpaceWidth(600)}
                      style={{
                        padding: '5px 10px',
                        backgroundColor: noteSpaceWidth === 600 ? '#e6e6e6' : 'white',
                        border: noteSpaceWidth === 600 ? '2px solid black' : '1px solid black',
                        borderRadius: '3px',
                        cursor: 'pointer'
                      }}
                    >
                      L (600px)
                    </button>
                    <button
                      onClick={() => setNoteSpaceWidth(800)}
                      style={{
                        padding: '5px 10px',
                        backgroundColor: noteSpaceWidth === 800 ? '#e6e6e6' : 'white',
                        border: noteSpaceWidth === 800 ? '2px solid black' : '1px solid black',
                        borderRadius: '3px',
                        cursor: 'pointer'
                      }}
                    >
                      XL (800px)
                    </button>
                  </div>
                </div>
              </div>
              
              {/* Note Space Position selector */}
              <div style={{ marginBottom: '20px' }}>
                <p style={{ fontWeight: 'bold', marginBottom: '5px' }}>Note Space Position</p>
                <div style={{ display: 'flex', flexDirection: 'column', gap: '8px' }}>
                  <div style={{ display: 'flex', flexWrap: 'wrap', gap: '10px' }}>
                    {['right', 'left', 'top', 'bottom'].map((position) => (
                      <button
                        key={position}
                        onClick={() => setNoteSpacePosition(position)}
                        style={{
                          padding: '8px 12px',
                          backgroundColor: noteSpacePosition === position ? '#e6e6e6' : 'white',
                          border: noteSpacePosition === position ? '2px solid black' : '1px solid black',
                          borderRadius: '3px',
                          cursor: 'pointer',
                          textTransform: 'capitalize',
                          flex: '1 0 calc(50% - 10px)',
                          display: 'flex',
                          alignItems: 'center',
                          justifyContent: 'center',
                          minWidth: '80px'
                        }}
                      >
                        <div style={{ 
                          width: '16px', 
                          height: '16px', 
                          marginRight: '5px',
                          position: 'relative',
                          border: '1px solid #666',
                          borderRadius: '2px'
                        }}>
                          <div style={{ 
                            position: 'absolute',
                            backgroundColor: '#666',
                            ...(position === 'right' ? { right: 0, top: 0, width: '30%', height: '100%' } :
                               position === 'left' ? { left: 0, top: 0, width: '30%', height: '100%' } :
                               position === 'top' ? { top: 0, left: 0, width: '100%', height: '30%' } :
                               { bottom: 0, left: 0, width: '100%', height: '30%' })
                          }}></div>
                        </div>
                        {position}
                      </button>
                    ))}
                  </div>
                  <p style={{ fontSize: '12px', margin: '5px 0 0 0' }}>
                    Select where to add the note space on each page
                  </p>
                </div>
              </div>
              
              {/* Color options section */}
              <div style={{ marginBottom: '20px' }}>
                <p style={{ fontWeight: 'bold', marginBottom: '5px' }}>Note Space Color</p>
                <p style={{ fontSize: '12px', marginTop: '0', marginBottom: '10px' }}>Default: White</p>
                
                <div style={{ display: 'flex', flexDirection: 'column', gap: '8px' }}>
                  <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
                    <input
                      type="radio"
                      id="colorWhite"
                      name="colorOption"
                      checked={colorOption === 'white'}
                      onChange={() => {
                        setColorOption('white');
                        setUseCustomColor(true);
                      }}
                      style={{ cursor: 'pointer' }}
                    />
                    <label htmlFor="colorWhite" style={{ fontSize: '14px', cursor: 'pointer' }}>
                      White (Default)
                    </label>
                    <div style={{ 
                      width: '20px', 
                      height: '20px', 
                      backgroundColor: '#ffffff', 
                      border: '1px solid #ccc',
                      marginLeft: '5px'
                    }}></div>
                  </div>
                  
                  <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
                    <input
                      type="radio"
                      id="colorCustom"
                      name="colorOption"
                      checked={colorOption === 'custom'}
                      onChange={() => {
                        setColorOption('custom');
                        setUseCustomColor(true);
                      }}
                      style={{ cursor: 'pointer' }}
                    />
                    <label htmlFor="colorCustom" style={{ fontSize: '14px', cursor: 'pointer' }}>
                      Custom Color
                    </label>
                  </div>
                  
                  {colorOption === 'custom' && (
                    <div style={{ marginLeft: '25px', marginTop: '5px' }}>
                      <div style={{ display: 'flex', flexWrap: 'wrap', gap: '5px', marginBottom: '10px' }}>
                        {predefinedColors.map((color) => (
                          <div
                            key={color.value}
                            onClick={() => setCustomColor(color.value)}
                            style={{
                              width: '25px',
                              height: '25px',
                              backgroundColor: color.value,
                              border: customColor === color.value ? '2px solid black' : '1px solid #ccc',
                              cursor: 'pointer',
                              borderRadius: '3px'
                            }}
                            title={color.name}
                          ></div>
                        ))}
                      </div>
                      
                      <div style={{ display: 'flex', alignItems: 'center', gap: '10px' }}>
                        <input
                          type="color"
                          value={customColor}
                          onChange={(e) => setCustomColor(e.target.value)}
                          style={{ width: '40px', height: '30px', cursor: 'pointer' }}
                        />
                        <input
                          type="text"
                          value={customColor}
                          onChange={(e) => {
                            const value = e.target.value;
                            if (/^#[0-9A-Fa-f]{0,6}$/.test(value)) {
                              setCustomColor(value);
                            }
                          }}
                          style={{
                            width: '80px',
                            padding: '5px',
                            border: '1px solid #ccc',
                            borderRadius: '3px'
                          }}
                        />
                      </div>
                    </div>
                  )}
                </div>
              </div>
              
              <div style={{ marginBottom: '20px' }}>
                <p style={{ fontWeight: 'bold', marginBottom: '5px' }}>Output Filename</p>
                <div style={{ display: 'flex', alignItems: 'center' }}>
                  <div style={{ 
                    display: 'flex', 
                    flex: 1,
                    border: '1px solid black',
                    borderRadius: '3px 0 0 3px',
                    overflow: 'hidden'
                  }}>
                    <input
                      type="text"
                      value={baseFileName}
                      onChange={handleBaseFileNameChange}
                      style={{
                        flex: 1,
                        padding: '5px',
                        border: 'none',
                        outline: 'none',
                        minWidth: 0
                      }}
                      placeholder="Enter filename"
                    />
                    <span style={{ 
                      padding: '5px', 
                      backgroundColor: '#f0f0f0', 
                      color: '#666',
                      borderLeft: '1px solid #ccc',
                      whiteSpace: 'nowrap'
                    }}>
                      {includeWithNotes ? '_with_notes.pdf' : '.pdf'}
                    </span>
                  </div>
                  <button
                    onClick={resetBaseFileName}
                    style={{
                      padding: '5px 10px',
                      backgroundColor: 'white',
                      border: '1px solid black',
                      borderLeft: 'none',
                      borderRadius: '0 3px 3px 0',
                      cursor: 'pointer',
                      whiteSpace: 'nowrap'
                    }}
                  >
                    Reset
                  </button>
                </div>
                <div style={{ 
                  display: 'flex', 
                  alignItems: 'center', 
                  marginTop: '8px',
                  gap: '8px'
                }}>
                  <input
                    type="checkbox"
                    id="includeWithNotes"
                    checked={includeWithNotes}
                    onChange={handleCheckboxChange}
                    style={{ cursor: 'pointer' }}
                  />
                  <label 
                    htmlFor="includeWithNotes" 
                    style={{ 
                      fontSize: '14px',
                      cursor: 'pointer'
                    }}
                  >
                    Include "_with_notes" in filename
                  </label>
                </div>
              </div>
              
              {file && (
                <div style={{ marginBottom: '20px' }}>
                  <button
                    onClick={handleDownload}
                    disabled={downloadIsProcessing}
                    style={{
                      width: '100%',
                      padding: '8px 16px',
                      backgroundColor: 'white',
                      border: '1px solid black',
                      borderRadius: '3px',
                      cursor: downloadIsProcessing ? 'default' : 'pointer',
                      opacity: downloadIsProcessing ? 0.7 : 1
                    }}
                  >
                    {downloadIsProcessing ? 'Processing...' : 'Download PDF'}
                  </button>
                </div>
              )}
            </div>
          </div>
        </div>
        
        {/* Feedback section */}
        <div style={{
          width: '100%',
          minHeight: '300px',
          padding: '20px 20px 40px 20px',
          boxSizing: 'border-box',
          flex: 1,
          display: 'flex',
          flexDirection: 'column',
          position: 'relative',
          zIndex: 2,
          marginTop: '0'
        }}>
          <div style={{ 
            display: 'flex', 
            flexDirection: 'column', 
            alignItems: 'center', 
            width: '100%',
            flex: 1,
            position: 'relative',
            zIndex: 3,
            paddingTop: '5px' /* Reduced from 10px to move text up slightly */
          }}>
            <div style={{
              width: '80%',
              marginBottom: '10px',
              textAlign: 'center'
            }}>
              <p style={{ fontSize: '14px', lineHeight: '1.4', margin: '0 0 5px 0' }}>
                <strong>Help Improve This AI-Powered Tool!</strong> Your feedback is essential for making SpaceMyPDF even better for everyone.
              </p>
              <p style={{ fontSize: '14px', lineHeight: '1.4', margin: '0 0 5px 0' }}>
                As this application was created using artificial intelligence, your suggestions and bug reports are crucial for its improvement.
              </p>
              <p style={{ fontSize: '14px', lineHeight: '1.4', margin: '0' }}>
                Please describe any issues in detail and attach screenshots if possible to help us understand and fix problems quickly.
              </p>
            </div>
            
            <textarea
              value={feedback}
              onChange={(e) => setFeedback(e.target.value)}
              style={{
                width: '80%',
                height: '55px', /* Reduced from 60px */
                padding: '10px',
                border: '1px solid black',
                borderRadius: '3px',
                marginBottom: '10px', /* Reduced from 15px */
                resize: 'none',
                backgroundColor: 'rgba(255,255,255,0.7)',
                fontSize: '14px'
              }}
              placeholder="Enter your feedback, suggestions, or describe any bugs you've encountered..."
            />
            
            <div style={{
              width: '80%',
              marginBottom: '10px' /* Reduced from 15px */
            }}>
              <div style={{
                display: 'flex',
                flexDirection: 'column',
                alignItems: 'flex-start',
                width: '100%'
              }}>
                <p style={{ 
                  fontSize: '14px', 
                  fontWeight: 'bold', 
                  margin: '0 0 5px 0' 
                }}>
                  Attach Screenshots or Images (Optional)
                </p>
                
                <div style={{
                  display: 'flex',
                  alignItems: 'center',
                  width: '100%',
                  gap: '10px',
                  marginBottom: '5px'
                }}>
                  <input
                    ref={feedbackImageRef}
                    type="file"
                    accept="image/*"
                    onChange={handleFeedbackImageUpload}
                    multiple
                    style={{ 
                      flex: 1,
                      fontSize: '14px'
                    }}
                  />
                  
                  {feedbackImages.length > 0 && (
                    <button
                      onClick={clearAllFeedbackImages}
                      style={{
                        padding: '5px 10px',
                        backgroundColor: 'white',
                        border: '1px solid black',
                        borderRadius: '3px',
                        cursor: 'pointer',
                        fontSize: '14px'
                      }}
                    >
                      Clear All
                    </button>
                  )}
                </div>
                
                <p style={{ 
                  fontSize: '12px', 
                  margin: '0 0 5px 0',
                  color: '#666'
                }}>
                  Maximum file size: 5MB per image
                </p>
                
                {feedbackImagePreviews.length > 0 && (
                  <div style={{
                    width: '100%',
                    marginTop: '10px',
                    marginBottom: '10px',
                    display: 'flex',
                    flexDirection: 'column',
                    gap: '10px'
                  }}>
                    <p style={{ 
                      fontSize: '14px', 
                      margin: '0 0 5px 0',
                      fontWeight: 'bold'
                    }}>
                      Attached Images ({feedbackImagePreviews.length}):
                    </p>
                    <div style={{
                      display: 'flex',
                      flexWrap: 'wrap',
                      gap: '10px',
                      justifyContent: 'flex-start'
                    }}>
                      {feedbackImagePreviews.map((preview, index) => (
                        <div key={index} style={{
                          position: 'relative',
                          border: '1px solid #ccc',
                          padding: '5px',
                          borderRadius: '3px',
                          backgroundColor: 'white',
                          width: '100px',
                          height: '100px'
                        }}>
                          <img 
                            src={preview} 
                            alt={`Feedback image ${index + 1}`} 
                            style={{
                              width: '100%',
                              height: '100%',
                              objectFit: 'contain',
                              display: 'block'
                            }}
                          />
                          <button
                            onClick={() => removeFeedbackImage(index)}
                            style={{
                              position: 'absolute',
                              top: '-8px',
                              right: '-8px',
                              width: '20px',
                              height: '20px',
                              borderRadius: '50%',
                              backgroundColor: 'white',
                              border: '1px solid #999',
                              display: 'flex',
                              alignItems: 'center',
                              justifyContent: 'center',
                              cursor: 'pointer',
                              fontSize: '12px',
                              fontWeight: 'bold',
                              padding: 0,
                              lineHeight: 1
                            }}
                          >
                            ×
                          </button>
                        </div>
                      ))}
                    </div>
                  </div>
                )}
              </div>
            </div>
            
            <button 
              style={{
                padding: '8px 20px',
                backgroundColor: 'white',
                border: '1px solid black',
                borderRadius: '3px',
                cursor: 'pointer',
                marginBottom: '15px', /* Increased from 5px to 15px to add more space below the button */
                fontSize: '16px',
                fontWeight: 'bold'
              }}
              onClick={submitFeedback}
            >
              Submit Feedback
            </button>
          </div>
        </div>
      </div>
    </div>
  );
}
